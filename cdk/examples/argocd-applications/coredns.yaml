apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: coredns
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  source:
    repoURL: https://github.com/votre-org/votre-repo-gitops
    targetRevision: HEAD
    path: manifests/coredns
    helm:
      values: |
        # Configuration CoreDNS pour EKS
        image:
          repository: public.ecr.aws/eks-distro/coredns
          tag: v1.10.1-eks-1-28-1
        
        # Configuration pour EKS
        serviceAccount:
          create: true
          name: coredns
        
        # Configuration des réplicas
        replicaCount: 2
        
        # Configuration des ressources
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        
        # Configuration de la stratégie de déploiement
        deploymentStrategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
        
        # Configuration des probes
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 5
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8181
          initialDelaySeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Configuration du service
        service:
          type: ClusterIP
          port: 53
          targetPort: 53
          protocol: UDP
        
        # Configuration des annotations
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9153"
        
        # Configuration des labels
        podLabels:
          app.kubernetes.io/name: coredns
          app.kubernetes.io/instance: coredns
        
        # Configuration de la tolérance pour les nœuds
        tolerations:
          - key: "kubernetes.io/os"
            operator: "Equal"
            value: "linux"
            effect: "NoSchedule"
        
        # Configuration de l'affinité
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - coredns
                topologyKey: kubernetes.io/hostname
        
        # Configuration de la configuration CoreDNS
        config:
          Corefile: |
            .:53 {
                errors
                health {
                    lameduck 5s
                }
                ready
                kubernetes cluster.local in-addr.arpa ip6.arpa {
                    pods insecure
                    fallthrough in-addr.arpa ip6.arpa
                    ttl 30
                }
                prometheus :9153
                forward . /etc/resolv.conf {
                    max_concurrent 1000
                }
                cache 30
                loop
                reload
                loadbalance
            }
  destination:
    server: https://kubernetes.default.svc
    namespace: kube-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m 